}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
# Visualizing results
print(chi_ta2)
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
# Defining the objective function to minimize
objective <- function(x) {
lower <- qchisq(x, df=n)
upper <- qchisq(x + ci, df=n)
return(upper - lower)
}
# Performing the optimization to find the x that minimizes the interval width
result <- optimx::optimx(par=c((1 - ci) / 2), fn=objective, lower=0, upper=1 - ci, method="L-BFGS-B")
## Calculating quantiles for tails
chi_low <- qchisq(result$par[1], n)
chi_upp <- qchisq(result$par[1]r + ci, n)
## Calculating limits
limit_inf <- chi_low
limit_upp <- chi_upp
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf, qs = limit_upp, w = w)
}
}
return(chi_table)
}
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
# Defining the objective function to minimize
objective <- function(x) {
lower <- qchisq(x, df=n)
upper <- qchisq(x + ci, df=n)
return(upper - lower)
}
# Performing the optimization to find the x that minimizes the interval width
result <- optimx::optimx(par=c((1 - ci) / 2), fn=objective, lower=0, upper=1 - ci, method="L-BFGS-B")
## Calculating quantiles for tails
chi_low <- qchisq(result$par[1], n)
chi_upp <- qchisq(result$par[1] + ci, n)
## Calculating limits
limit_inf <- chi_low
limit_upp <- chi_upp
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf, qs = limit_upp, w = w)
}
}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
# Visualizing results
print(chi_ta2)
qchisq(0.1,5)
prueba <- c(5, 3, 9, 1, 10)
prueba(0)
prueba[0]
prueba[3]
prueba[1]
prueba.which.min()
which.min(prueba)
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Definins auxiliars list
l <- numeric(0)
qiaux <- numeric(0)
qsaux <- numeric(0)
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
## Defining alpha
alpha <- 1 - ci
## Defining a limit to iterate
limit <- qchisq(alpha/2, n)
## Defining my random numbers
numbers <- runif(100, min=0, max=limit)
## Iterating
for (num in numbers){
## Defining auxiliar variable
a <- pchisq(num, n)
## Defining qsuperior
qs <- qchisq(1 +a -alpha)
## Calculating limits
limit_inf <- num
limit_upp <- qs
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing w data
l <- c(l, w)
## Storing auxiliar data
qiaux <- c(qiaux, num)
qsaux <- c(qsaux, qs)
}
## Getting the min amplitude interval
min_amplitude <- l.min()
## Getting index of the min amplitude interval
min_index <- which.min(l)
## Getting the limits of the interval
limit_inf_f <- qiaux[min_index]
limit_upp_f <- qsaux[min_index]
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf_f, qs = limit_upp_f, w = min_amplitude)
}
}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Definins auxiliars list
l <- numeric(0)
qiaux <- numeric(0)
qsaux <- numeric(0)
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
## Defining alpha
alpha <- 1 - ci
## Defining a limit to iterate
limit <- qchisq(alpha/2, n)
## Defining my random numbers
numbers <- runif(100, min=0, max=limit)
## Iterating
for (num in numbers){
## Defining auxiliar variable
a <- pchisq(num, n)
## Defining qsuperior
qs <- qchisq(1 +a -alpha, n)
## Calculating limits
limit_inf <- num
limit_upp <- qs
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing w data
l <- c(l, w)
## Storing auxiliar data
qiaux <- c(qiaux, num)
qsaux <- c(qsaux, qs)
}
## Getting the min amplitude interval
min_amplitude <- l.min()
## Getting index of the min amplitude interval
min_index <- which.min(l)
## Getting the limits of the interval
limit_inf_f <- qiaux[min_index]
limit_upp_f <- qsaux[min_index]
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf_f, qs = limit_upp_f, w = min_amplitude)
}
}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Definins auxiliars list
l <- numeric(0)
qiaux <- numeric(0)
qsaux <- numeric(0)
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
## Defining alpha
alpha <- 1 - ci
## Defining a limit to iterate
limit <- qchisq(alpha/2, n)
## Defining my random numbers
numbers <- runif(100, min=0, max=limit)
## Iterating
for (num in numbers){
## Defining auxiliar variable
a <- pchisq(num, n)
## Defining qsuperior
qs <- qchisq(1 +a -alpha, n)
## Calculating limits
limit_inf <- num
limit_upp <- qs
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing w data
l <- c(l, w)
## Storing auxiliar data
qiaux <- c(qiaux, num)
qsaux <- c(qsaux, qs)
}
## Getting the min amplitude interval
min_amplitude <- min(l)
## Getting index of the min amplitude interval
min_index <- which.min(l)
## Getting the limits of the interval
limit_inf_f <- qiaux[min_index]
limit_upp_f <- qsaux[min_index]
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf_f, qs = limit_upp_f, w = min_amplitude)
}
}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
# Visualizing results
print(chi_ta2)
View(chi_ta2)
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
## Defining auxiliars vectors
l <- numeric(0)
qiaux <- numeric(0)
qsaux <- numeric(0)
## Defining alpha
alpha <- 1 - ci
## Defining a limit to iterate
limit <- qchisq(alpha/2, n)
## Defining my random numbers
numbers <- runif(100, min=0, max=limit)
## Iterating
for (num in numbers){
## Defining auxiliar variable
a <- pchisq(num, n)
## Defining qsuperior
qf <- qchisq(1 + a - alpha, n)
## Calculating limits
limit_inf <- num
limit_upp <- qf
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing w data
l <- c(l, w)
## Storing auxiliar data
qiaux <- c(qiaux, num)
qsaux <- c(qsaux, qs)
}
## Getting the min amplitude interval
min_amplitude <- min(l)
## Getting index of the min amplitude interval
min_index <- which.min(l)
## Getting the limits of the interval
limit_inf_f <- qiaux[min_index]
limit_upp_f <- qsaux[min_index]
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf_f, qs = limit_upp_f, w = min_amplitude)
}
}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
## Defining auxiliars vectors
l <- numeric(0)
qiaux <- numeric(0)
qsaux <- numeric(0)
## Defining alpha
alpha <- 1 - ci
## Defining a limit to iterate
limit <- qchisq(alpha/2, n)
## Defining my random numbers
numbers <- runif(100, min=0, max=limit)
## Iterating
for (num in numbers){
## Defining auxiliar variable
a <- pchisq(num, n)
## Defining qsuperior
qf <- qchisq(1 + a - alpha, n)
## Calculating limits
limit_inf <- num
limit_upp <- qf
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing w data
l <- c(l, w)
## Storing auxiliar data
qiaux <- c(qiaux, num)
qsaux <- c(qsaux, qf)
}
## Getting the min amplitude interval
min_amplitude <- min(l)
## Getting index of the min amplitude interval
min_index <- which.min(l)
## Getting the limits of the interval
limit_inf_f <- qiaux[min_index]
limit_upp_f <- qsaux[min_index]
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf_f, qs = limit_upp_f, w = min_amplitude)
}
}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
# Visualizing results
print(chi_ta2)
View(chi_ta2)
## B.2
## Creating function for easy usage(same weight tails)
chi_table_function_MINw <- function(n_vector, conf_int_vector){
## Defining list to store outputs
chi_table <- list()
## Iterating over each sigma value
for (n in n_vector) {
## Iterating over each confidence interval value we have
for (ci in conf_int_vector){
## Defining auxiliars vectors
l <- numeric(0)
qiaux <- numeric(0)
qsaux <- numeric(0)
## Defining alpha
alpha <- 1 - ci
## Defining a limit to iterate
limit <- qchisq(alpha/2, n)
## Defining my random numbers
numbers <- runif(100, min=0, max=limit)
## Iterating
for (num in numbers){
## Defining auxiliar variable
a <- pchisq(num, n)
## Defining qsuperior
qf <- qchisq(1 + a - alpha, n)
## Calculating limits
limit_inf <- num
limit_upp <- qf
## Calculating w value (Difference between upper limit and lower limit)
w <- limit_upp - limit_inf
## Storing w data
l <- c(l, w)
## Storing auxiliar data
qiaux <- c(qiaux, num)
qsaux <- c(qsaux, qf)
}
## Getting the min amplitude interval
min_amplitude <- min(l)
## Getting index of the min amplitude interval
min_index <- which.min(l)
## Getting the limits of the interval
limit_inf_f <- qiaux[min_index]
limit_upp_f <- qsaux[min_index]
## Storing on the table
chi_table[[length(chi_table) +1]] <- list(Degrees_of_freedom = n, CI = ci, qi = limit_inf_f, qs = limit_upp_f, w = min_amplitude)
}
}
return(chi_table)
}
# Using our function
chi_ta2 <- chi_table_function_MINw(degreesF_vector, confidence_intervals)
# Visualizing results
print(chi_ta2)
View(chi_ta2)
setwd("~/ITAM/9no Semestre/METODOS MULTIVARIADOS/REPOSITORIO/Multivariate_Statistical_Course_Assignments_Fall2024/ASSIGNMENT_01")
# Cargar el archivo .rda
load("C:/Users/mauva/OneDrive/Documents/ITAM/9no Semestre/METODOS MULTIVARIADOS/REPOSITORIO/Multivariate_Statistical_Course_Assignments_Fall2024/ASSIGNMENT_01/wine.rda")
# Verificar los objetos cargados en el entorno
ls()
# Supongamos que el archivo contiene un data.frame llamado 'wine_data'
# Si el archivo tiene otro nombre de objeto, cámbialo en las siguientes líneas
print(wine_data)
# Convertir a data.frame si no lo es ya (opcional)
wine_df <- as.data.frame(wine_data)
# Mostrar los primeros registros
head(wine_df)
wine
# Supongamos que el archivo contiene un data.frame llamado 'wine_data'
# Si el archivo tiene otro nombre de objeto, cámbialo en las siguientes líneas
print(wine)
# Cargar el archivo .rda
load("C:/Users/mauva/OneDrive/Documents/ITAM/9no Semestre/METODOS MULTIVARIADOS/REPOSITORIO/Multivariate_Statistical_Course_Assignments_Fall2024/ASSIGNMENT_01/wine.rda")
# Supongamos que el archivo contiene un data.frame llamado 'wine_data'
# Si el archivo tiene otro nombre de objeto, cámbialo en las siguientes líneas
print(wine)
# Convertir a data.frame si no lo es ya (opcional)
wine_df <- as.data.frame(wine)
# Mostrar los primeros registros
head(wine_df)
setwd("~/ITAM/9no Semestre/METODOS MULTIVARIADOS/REPOSITORIO/Multivariate_Statistical_Course_Assignments_Fall2024/ASSIGNMENT_01")
# Performing LDA
lda_model <- lda(Class ~ ., data = wine_df)
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
library(ggplot2)
# Cargar el archivo .rda
load("C:/Users/mauva/OneDrive/Documents/ITAM/9no Semestre/METODOS MULTIVARIADOS/REPOSITORIO/Multivariate_Statistical_Course_Assignments_Fall2024/ASSIGNMENT_01/wine.rda")
# Supongamos que el archivo contiene un data.frame llamado 'wine_data'
# Si el archivo tiene otro nombre de objeto, cámbialo en las siguientes líneas
print(wine)
# Convertir a data.frame si no lo es ya (opcional)
wine_df <- as.data.frame(wine)
# Mostrar los primeros registros
head(wine_df)
# Performing LDA
lda_model <- lda(Class ~ ., data = wine_df)
# Project the data onto the discriminant axes
lda_values <- predict(lda_model)
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
library(ggplot2)
#
load("C:/Users/mauva/OneDrive/Documents/ITAM/9no Semestre/METODOS MULTIVARIADOS/REPOSITORIO/Multivariate_Statistical_Course_Assignments_Fall2024/ASSIGNMENT_01/wine.rda")
#
print(wine)
#
wine_df <- as.data.frame(wine)
#
head(wine_df)
# Load necessary libraries
library(MASS)  # For performing LDA
# Ensure the 'classdigit' column is a factor (if it's not already)
wine_df$classdigit <- as.factor(wine_df$classdigit)
# Perform LDA using the classdigit as the response variable and all other variables as predictors
lda_model <- lda(classdigit ~ Alcohol + MalicAcid + Ash + AlcAsh + Mg + Phenols + Flav + NonFlavPhenols + Proa + Color + Hue + OD + Proline, data = wine_df)
# Project the data onto the LDA axes
lda_values <- predict(lda_model)
# Create a data frame with the LDA components and the wine class
lda_df <- data.frame(LD1 = lda_values$x[, 1], LD2 = lda_values$x[, 2], WineType = wine_df$class)
# Plot the first two discriminant components
ggplot(lda_df, aes(x = LD1, y = LD2, color = WineType)) +
geom_point(size = 3) +
labs(title = "Scatterplot of the First Two LDA Components",
x = "First Discriminant Component (LD1)",
y = "Second Discriminant Component (LD2)") +
theme_minimal() +
theme(legend.title = element_blank())
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.5
# Loading dataset
load("C:/Users/mauva/OneDrive/Documents/ITAM/9no Semestre/METODOS MULTIVARIADOS/REPOSITORIO/Multivariate_Statistical_Course_Assignments_Fall2024/ASSIGNMENT_01/diabetes.rda")
# Parsing to dataframe
diabetes_df <- as.data.frame(diabetes)
# Checking head dataset
head(diabetes_df)
library(GGally)
install.packages("GGally")
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
library(ggplot2)
install.packages("scales")
install.packages("scales")
install.packages("scales")
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(MASS)
library(ggplot2)
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
library(ggplot2)
library(GGally)
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
library(ggplot2)
install.packages("vctrs")
library(ggplot2)
install.packages("ggplot2")
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
library(ggplot2)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
## Modern Multivariate Statistical Techniques (Izenman) Ex. 8.2
library(MASS)
library(ggplot2)
library(GGally)
R version
R.version.string
R.version.string
R.version.string
install.packages("installr")
library(installr)
updateR()  # This will guide you through the update process and package migration.
R.version.string
